{"version":3,"sources":["components/form.js","components/result.js","components/App.js","serviceWorker.js","index.js"],"names":["Form","props","onSubmit","submit","type","value","placeholder","onChange","change","Result","weather","err","city","temp","date","sunrise","sunset","pressure","wind","content","sunriseTime","Date","toLocaleTimeString","sunsetTime","className","APIKey","App","state","handleInputChange","e","setState","target","handleCitySubmit","preventDefault","API","fetch","then","response","ok","Error","json","data","time","toLocaleString","sys","main","speed","catch","console","log","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"6RAWeA,EATF,SAACC,GACV,OACI,0BAAMC,SAAUD,EAAME,QAClB,2BAAOC,KAAK,OAAOC,MAAOJ,EAAMI,MAAOC,YAAY,eAAeC,SAAUN,EAAMO,SAClF,qDC6BGC,G,MAhCA,SAACR,GAAW,IAAD,EAC0CA,EAAMS,QAA/DC,EADe,EACfA,IAAKC,EADU,EACVA,KAAMC,EADI,EACJA,KAAMC,EADF,EACEA,KAAKC,EADP,EACOA,QAASC,EADhB,EACgBA,OAAQC,EADxB,EACwBA,SAAUC,EADlC,EACkCA,KAEpDC,EAAU,KAEd,IAAIR,GAAOC,EAAM,CAEb,IAAMQ,EAAc,IAAIC,KAAe,IAAVN,GAAgBO,qBACvCC,EAAa,IAAIF,KAAc,IAATL,GAAeM,qBAC3CH,EACI,6BACA,wDAA6B,4BAAKP,IAClC,wDAA8BE,GAC9B,qDAA2BD,EAA3B,SACA,2DAAoBO,GACpB,2DAAoBG,GACpB,0DAA2BL,EAA3B,QACA,wDAAyBD,EAAzB,SAMR,OACI,oCACA,yBAAKO,UAAU,UACZb,EAAG,4BAAwBC,GAASO,MCvBzCM,G,MAAS,oCAqEAC,E,4MAjEbC,MAAQ,CACNtB,MAAO,GACPS,KAAM,GACNF,KAAM,GACNG,QAAS,GACTC,OAAQ,GACRH,KAAM,GACNI,SAAU,GACVC,KAAM,GACNP,KAAK,G,EAEPiB,kBAAoB,SAACC,GACnB,EAAKC,SAAS,CACZzB,MAAOwB,EAAEE,OAAO1B,S,EAIpB2B,iBAAmB,SAACH,GAClBA,EAAEI,iBACF,IAAMC,EAAG,4DAAwD,EAAKP,MAAMtB,MAAnE,kBAAkFoB,EAAlF,iBAETU,MAAMD,GACLE,MAAK,SAAAC,GACJ,GAAGA,EAASC,GACV,OAAOD,EAET,MAAME,MAAM,8BAEbH,MAAK,SAAAC,GAAQ,OAAIA,EAASG,UAC1BJ,MAAK,SAAAK,GACJ,IAAMC,GAAO,IAAIrB,MAAOsB,iBACxB,EAAKb,SAAS,CACZhB,KAAM4B,EACN9B,KAAM,EAAKe,MAAMtB,MACjBU,QAAS0B,EAAKG,IAAI7B,QAClBC,OAAQyB,EAAKG,IAAI5B,OACjBH,KAAM4B,EAAKI,KAAKhC,KAChBI,SAAUwB,EAAKI,KAAK5B,SACpBC,KAAMuB,EAAKvB,KAAK4B,MAChBnC,KAAK,OAGRoC,OAAM,SAAApC,GACLqC,QAAQC,IAAItC,GACZ,EAAKmB,SAAS,CACZnB,KAAK,EACLC,KAAM,EAAKe,MAAMtB,Y,uDAKvB,OACE,yBAAKmB,UAAU,OACb,kBAAC,EAAD,CACAnB,MAAO6C,KAAKvB,MAAMtB,MAClBG,OAAQ0C,KAAKtB,kBACbzB,OAAQ+C,KAAKlB,mBAEb,kBAAC,EAAD,CACAtB,QAASwC,KAAKvB,a,GA7DFwB,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5B,MAAK,SAAA6B,GACJA,EAAaC,gBAEdnB,OAAM,SAAAoB,GACLnB,QAAQmB,MAAMA,EAAMC,c","file":"static/js/main.b3a85095.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Form = (props) => {\r\n    return (\r\n        <form onSubmit={props.submit}>\r\n            <input type=\"text\" value={props.value} placeholder=\"Wpisz miasto\" onChange={props.change}/>\r\n            <button>Wyszukaj miasto</button>\r\n        </form>\r\n    );\r\n}\r\n \r\nexport default Form;","import React from 'react';\r\nimport './Result.css';\r\n\r\nconst Result = (props) => {\r\n    const {err, city, temp, date,sunrise, sunset, pressure, wind} = props.weather\r\n\r\n    let content = null;\r\n\r\n    if(!err && city) {\r\n\r\n        const sunriseTime = new Date(sunrise * 1000).toLocaleTimeString()\r\n        const sunsetTime = new Date(sunset * 1000).toLocaleTimeString()\r\n        content = (\r\n            <div>\r\n            <h3>Wyniki wyszukiwania dla: <em>{city}</em></h3>\r\n            <h4>Dane dla dnia i godziny: {date}</h4>\r\n            <h4>Aktualna temperatura: {temp}°C</h4>\r\n            <h4>Wschód słońca: {sunriseTime}</h4>\r\n            <h4>Zachód słońca: {sunsetTime}</h4>\r\n            <h4>Aktualna siła wiatru: {wind} m/h</h4>\r\n            <h4>Aktualne ciśnienie: {pressure} hPa</h4>   \r\n\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <div className=\"result\">\r\n          {err ? `Nie mamy w bazie: ${city}` : content}  \r\n        </div>\r\n        </>\r\n    );\r\n}\r\n \r\nexport default Result;","import React, {Component} from 'react';\nimport Form from './form';\nimport Result from './result';\nimport './App.css';\n\n// Klucz do API\nconst APIKey = '42f820f38e074d0adb73d09de7748a6c'\n\nclass App extends Component {\n\n  state = {\n    value: \"\",\n    date: '',\n    city: '',\n    sunrise: '',\n    sunset: '',\n    temp: '',\n    pressure: '',\n    wind: '',\n    err: false,\n  }\n  handleInputChange = (e) => {\n    this.setState({\n      value: e.target.value\n    })\n  }\n\n  handleCitySubmit = (e) => {\n    e.preventDefault()\n    const API = `https://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&appid=${APIKey}&units=metric`\n\n    fetch(API)\n    .then(response => {\n      if(response.ok){\n        return response\n      }\n      throw Error(\"Nie udało się\")\n    })\n    .then(response => response.json())\n    .then(data => {\n      const time = new Date().toLocaleString()\n      this.setState({\n        date: time,\n        city: this.state.value,\n        sunrise: data.sys.sunrise,\n        sunset: data.sys.sunset,\n        temp: data.main.temp,\n        pressure: data.main.pressure,\n        wind: data.wind.speed,\n        err: false\n      })\n    })\n    .catch(err => {\n      console.log(err);\n      this.setState({\n        err: true,\n        city: this.state.value\n    })})\n  }\n\n  render(){\n  return (\n    <div className=\"App\">\n      <Form \n      value={this.state.value} \n      change={this.handleInputChange}\n      submit={this.handleCitySubmit}\n      />\n      <Result \n      weather={this.state}\n      />\n    </div>\n  );}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}